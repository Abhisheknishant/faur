#
# User variables:
#
# A_APP_NAME
#   Target binary file name
#
# A_EXTRA_CFLAGS
#   Passed to compiler
#
# A_EMBED_MEDIA
#   true or false
#
# A_PND_DIR
#   Path to dir that PND is packaged from
#
# A_PND_NAME
#   Target PND file name
#
# A_RULES_CLEAN
#   Rules to run before the default clean
#

# Relative path to project root from make subdir
A_ROOT := ..

#
# Project dirs created by a2x_new or overrode by user makefile
#
A_DIR_BIN ?= bin
A_DIR_OBJ ?= obj
A_DIR_SRC ?= src
A_DIR_ASSETS ?= assets
A_DIR_GFX ?= $(A_DIR_ASSETS)/gfx
A_DIR_SFX ?= $(A_DIR_ASSETS)/sfx

#
# Object files dir for current platform
#
A_DIR_OBJ_PLATFORM := $(A_ROOT)/$(A_DIR_OBJ)/$(A_PLATFORM)

#
# Subdir for generated code and its object files
#
A_DIR_GEN := $(A_DIR_OBJ_PLATFORM)/a2x_gen

#
# The final bin that gets built
#
A_FILE_TARGET_BIN := $(A_ROOT)/$(A_DIR_BIN)/$(A_APP_NAME)

#
# Project build time
#
A_FILE_SRC_GEN_BUILDTIME := $(A_DIR_GEN)/time.c

#
# Implements the a_embed__application function
#
A_FILE_SRC_GEN_EMBED := $(A_DIR_GEN)/embed.c

#
# .c source files
#
A_FILES_SRC_C_INC := $(shell a2x_srcfiles -q $(A_ROOT)/$(A_DIR_SRC) .inc.c)
A_FILES_SRC_C_ALL := $(shell a2x_srcfiles -q $(A_ROOT)/$(A_DIR_SRC) .c)
A_FILES_SRC_C := $(filter-out $(A_FILES_SRC_C_INC), $(A_FILES_SRC_C_ALL))

#
# All the object files.
# Keep buildtime separate from the rest, since they are its prerequisites.
#
A_FILE_OBJ_GEN_BUILDTIME := $(A_FILE_SRC_GEN_BUILDTIME:=.o)
A_FILE_OBJ_GEN_EMBED := $(A_FILE_SRC_GEN_EMBED:=.o)
A_FILES_OBJ := $(addprefix $(A_DIR_OBJ_PLATFORM)/, $(A_FILES_SRC_C:=.o)) $(A_FILE_OBJ_GEN_EMBED)

#
# Check if project wants to embed images and sound effects with a2x_bin
#
ifeq ($(A_EMBED_MEDIA), true)
    #
    # PNG and WAV files we can convert to C code
    #
    A_FILES_MEDIA_PNG := $(notdir $(wildcard $(A_ROOT)/$(A_DIR_GFX)/*.png))
    A_FILES_MEDIA_WAV := $(notdir $(wildcard $(A_ROOT)/$(A_DIR_SFX)/*.wav))

    #
    # Private prefixes
    #
    A_PREFIX_GEN_GFX := a_gfx__
    A_PREFIX_GEN_SFX := a_sfx__

    #
    # .c and .o gfx & sfx files
    #
    A_DIR_GEN_GFX := $(A_DIR_GEN)/$(A_PREFIX_GEN_GFX)
    A_DIR_GEN_SFX := $(A_DIR_GEN)/$(A_PREFIX_GEN_SFX)

    #
    # PNG and WAV files in .c form
    #
    A_FILES_SRC_GEN_GFX := $(addprefix $(A_DIR_GEN_GFX)/$(A_PREFIX_GEN_GFX), $(A_FILES_MEDIA_PNG:.png=_png.h))
    A_FILES_SRC_GEN_SFX := $(addprefix $(A_DIR_GEN_SFX)/$(A_PREFIX_GEN_SFX), $(A_FILES_MEDIA_WAV:.wav=_wav.h))
endif

#
# Compiler flags for all targets
#
A_GENERIC_CFLAGS := \
    -DA2X=1 \
    -std=c99 \
    -Wall \
    -Wextra \
    -Wconversion \
    -Wcast-align \
    -Wformat-security \
    -Werror \
    -pedantic \
    -pedantic-errors \
    -fstrict-aliasing \
    -D_XOPEN_SOURCE \
    -I$(A2X_PATH)/inc/$(A_PLATFORM) \
    $(A_PLATFORM_CFLAGS) \
    $(A_EXTRA_CFLAGS) \

all : $(A_FILE_TARGET_BIN)

$(A_FILE_TARGET_BIN) : $(A_FILES_OBJ) $(A_FILE_OBJ_GEN_BUILDTIME)
	@ echo "Building $(A_APP_NAME)"
	@ mkdir -p $(@D)
	@ $(CC) -o $@ $^ \
	$(A_PLATFORM_CFLAGS) \
	$(A_EXTRA_LIBS) \
	$(A2X_PATH)/lib/$(A_PLATFORM)/a2x.a \
	$(A_PLATFORM_LIBS)

$(A_FILE_SRC_GEN_BUILDTIME) : $(A_FILES_OBJ) $(A2X_PATH)/bin/a2x_buildtime
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_buildtime $@

$(A_DIR_GEN_GFX)/$(A_PREFIX_GEN_GFX)%_png.h : $(A_ROOT)/$(A_DIR_GFX)/%.png $(A2X_PATH)/bin/a2x_bin
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_bin $< $@ $(A_DIR_GFX)/$(<F)

$(A_DIR_GEN_SFX)/$(A_PREFIX_GEN_SFX)%_wav.h : $(A_ROOT)/$(A_DIR_SFX)/%.wav $(A2X_PATH)/bin/a2x_bin
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_bin $< $@ $(A_DIR_SFX)/$(<F)

$(A_FILE_SRC_GEN_EMBED) : $(A_FILES_SRC_GEN_GFX) $(A_FILES_SRC_GEN_SFX) $(A2X_PATH)/bin/a2x_embed
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_embed $@ $(A_DIR_GEN) $(A_PREFIX_GEN_GFX) $(A_PREFIX_GEN_SFX)

$(A_DIR_OBJ_PLATFORM)/%.c.o : $(A_ROOT)/$(A_DIR_SRC)/%.c
	@ echo "Compiling $<"
	@ mkdir -p $(@D)
	@ $(CC) -c -o $@ $< $(A_GENERIC_CFLAGS)

$(A_DIR_GEN)/%.c.o : $(A_DIR_GEN)/%.c
	@ echo "Compiling generated $(notdir $<)"
	@ mkdir -p $(@D)
	@ $(CC) -c -o $@ $< $(A_GENERIC_CFLAGS)

clean : $(A_RULES_CLEAN)
	@ echo "Removing $(A_FILE_TARGET_BIN) $(A_DIR_OBJ_PLATFORM)"
	@ rm -rf $(A_FILE_TARGET_BIN) $(A_DIR_OBJ_PLATFORM)

cleanbin :
	@ echo "Removing $(A_APP_NAME) binary"
	@ rm -f $(A_FILE_TARGET_BIN)

run : all
	@ echo "Running $(notdir $(A_APP_NAME))"
	@ cd $(A_ROOT)/$(A_DIR_BIN) ; ./$(A_APP_NAME)
