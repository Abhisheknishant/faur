#
# Project dirs created by a2x_new
#
A_DIR_BIN = ../bin
A_DIR_GFX = ../gfx
A_DIR_OBJ = ../obj
A_DIR_SFX = ../sfx
A_DIR_SRC = ../src

#
# Subdir for generated code and object files
#
A_DIR_SRC_GEN = $(A_DIR_SRC)/a2x_gen

#
# this is what gets built
#
A_FILE_TARGET_BIN = $(A_DIR_BIN)/$(A_APP_NAME)

#
# Project build time
#
A_FILE_SRC_GEN_BUILDTIME = $(A_DIR_SRC_GEN)/time.c

#
# a_embed__application
#
A_FILE_SRC_GEN_EMBED = $(A_DIR_SRC_GEN)/embed.c

#
# .c source files
#
A_FILES_SRC_C_INC = $(notdir $(wildcard $(A_DIR_SRC)/*.inc.c))
A_FILES_SRC_C_ALL = $(notdir $(wildcard $(A_DIR_SRC)/*.c))
A_FILES_SRC_C = $(filter-out $(A_FILES_SRC_C_INC), $(A_FILES_SRC_C_ALL))

#
# object file dirs
#
A_DIR_OBJ_PLATFORM = $(A_DIR_OBJ)/obj_$(A_PLATFORM)
A_DIR_OBJ_PLATFORM_GEN = $(A_DIR_OBJ_PLATFORM)/a2x_gen
A_DIR_OBJ_PLATFORM_GEN_GFX = $(A_DIR_OBJ_PLATFORM_GEN)/gfx
A_DIR_OBJ_PLATFORM_GEN_SFX = $(A_DIR_OBJ_PLATFORM_GEN)/sfx

#
# All the object files.
# Keep buildtime separate from the rest, since they are its prerequisites.
#
A_FILE_OBJ_GEN_BUILDTIME = $(addprefix $(A_DIR_OBJ_PLATFORM_GEN)/, $(notdir $(A_FILE_SRC_GEN_BUILDTIME:.c=.o)))
A_FILE_OBJ_GEN_EMBED = $(addprefix $(A_DIR_OBJ_PLATFORM_GEN)/, $(notdir $(A_FILE_SRC_GEN_EMBED:.c=.o)))
A_FILES_OBJ = $(addprefix $(A_DIR_OBJ_PLATFORM)/, $(A_FILES_SRC_C:.c=.o)) $(A_FILE_OBJ_GEN_EMBED)

#
# Check if project wants to embed images and sound effects with a2x_bin
#
ifeq ($(A_EMBED_MEDIA), true)
    A_EXTRA_CFLAGS += -DA_EMBED_MEDIA=1

    #
    # PNG and WAV files we can convert to C code
    #
    A_FILES_MEDIA_PNG = $(notdir $(wildcard $(A_DIR_GFX)/*.png))
    A_FILES_MEDIA_WAV = $(notdir $(wildcard $(A_DIR_SFX)/*.wav))

    #
    # .c gfx & sfx files
    #
    A_DIR_SRC_GEN_GFX = $(A_DIR_SRC_GEN)/gfx
    A_DIR_SRC_GEN_SFX = $(A_DIR_SRC_GEN)/sfx

    #
    # PNG and WAV files in .c form
    #
    A_FILES_SRC_GEN_GFX = $(addprefix $(A_DIR_SRC_GEN_GFX)/gfx_, $(A_FILES_MEDIA_PNG:.png=_png.c))
    A_FILES_SRC_GEN_SFX = $(addprefix $(A_DIR_SRC_GEN_SFX)/sfx_, $(A_FILES_MEDIA_WAV:.wav=_wav.c))

    A_FILES_OBJ += $(addprefix $(A_DIR_OBJ_PLATFORM_GEN_GFX)/, $(notdir $(A_FILES_SRC_GEN_GFX:.c=.o))) \
                   $(addprefix $(A_DIR_OBJ_PLATFORM_GEN_SFX)/, $(notdir $(A_FILES_SRC_GEN_SFX:.c=.o)))
endif

#
# compile flags
#
A_GENERIC_CFLAGS = \
    -std=c99 \
    -Wall \
    -Wextra \
    -Wconversion \
    -Wcast-align \
    -Wformat-security \
    -Werror \
    -pedantic \
    -pedantic-errors \
    -I$(A2X_PATH)/inc \
    $(A_PLATFORM_CFLAGS) \
    $(A_EXTRA_CFLAGS) \

#
# the main target
#
all : $(A_FILE_TARGET_BIN)

$(A_FILE_TARGET_BIN) : $(A_FILES_OBJ) $(A_FILE_OBJ_GEN_BUILDTIME)
	@ echo "Building $(A_APP_NAME)"
	@ mkdir -p $(@D)
	@ $(CC) -o $@ $^ \
	$(A_PLATFORM_CFLAGS) \
	$(A_EXTRA_LIBS) \
	-Wl,--whole-archive $(A2X_PATH)/lib/a2x_$(A_PLATFORM).a -Wl,--no-whole-archive \
	$(A_PLATFORM_LIBS)

#
# pattern rules for building the universe
#
$(A_FILE_SRC_GEN_BUILDTIME) : $(A_FILES_OBJ)
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_buildtime $@

$(A_DIR_SRC_GEN_GFX)/gfx_%_png.c : $(A_DIR_GFX)/%.png
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_bin $< $@ $(@:.c=.h) gfx

$(A_DIR_SRC_GEN_SFX)/sfx_%_wav.c : $(A_DIR_SFX)/%.wav
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_bin $< $@ $(@:.c=.h) sfx

$(A_FILE_SRC_GEN_EMBED) : $(A_FILES_SRC_GEN_GFX) $(A_FILES_SRC_GEN_SFX)
	@ mkdir -p $(@D)
	@ $(A2X_PATH)/bin/a2x_embed $@ $(A_DIR_SRC_GEN) gfx sfx

$(A_DIR_OBJ_PLATFORM)/%.o : $(A_DIR_SRC)/%.c
	@ echo "Compiling $(notdir $<)"
	@ mkdir -p $(@D)
	@ $(CC) -c -o $@ $< $(A_GENERIC_CFLAGS)

$(A_DIR_OBJ_PLATFORM_GEN_GFX)/%.o : $(A_DIR_SRC_GEN_GFX)/%.c
	@ echo "Compiling $(notdir $<)"
	@ mkdir -p $(@D)
	@ $(CC) -c -o $@ $< $(A_GENERIC_CFLAGS)

$(A_DIR_OBJ_PLATFORM_GEN_SFX)/%.o : $(A_DIR_SRC_GEN_SFX)/%.c
	@ echo "Compiling $(notdir $<)"
	@ mkdir -p $(@D)
	@ $(CC) -c -o $@ $< $(A_GENERIC_CFLAGS)

#
# delete all .o files and all generated .c files
#
clean :
	@ echo "Removing $(A_FILE_TARGET_BIN) $(A_DIR_OBJ) $(A_DIR_SRC_GEN)"
	@ rm -rf $(A_FILE_TARGET_BIN) $(A_DIR_OBJ) $(A_DIR_SRC_GEN)

#
# clean-up rule that deletes the built binary
#
cb : cleanbin

cleanbin :
	@ echo "Removing $(A_APP_NAME) binary"
	@ rm -f $(A_FILE_TARGET_BIN)

#
# run the program
#
run : all
	@ echo "Running $(notdir $(A_APP_NAME))"
	@ cd $(A_DIR_BIN) ; ./$(A_APP_NAME)
