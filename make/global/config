#
# App
#
A_CONFIG_APP_AUTHOR ?= Unknown
A_CONFIG_APP_NAME ?= Untitled
A_CONFIG_APP_VERSION_MAJOR ?= 1
A_CONFIG_APP_VERSION_MINOR ?= 0
A_CONFIG_APP_VERSION_MICRO ?= 0

#
# Build and compilation options
#
A_CONFIG_BUILD_CFLAGS ?=
A_CONFIG_BUILD_DEBUG ?= 0
A_CONFIG_BUILD_ID ?= default
A_CONFIG_BUILD_LIBS ?=
A_CONFIG_BUILD_OPT ?= -O0

A_CONFIG_BUILD_CFLAGS += $(A_CONFIG_BUILD_OPT)

#
# Project dirs
#
#   A_CONFIG_DIR_ROOT - Relative path from the make dir to the project root
#   A_CONFIG_DIR_AST - Root-relative path to the project's media assets dir
#   A_CONFIG_DIR_BIN - Root-relative path to executable files dir
#   A_CONFIG_DIR_OBJ - Root-relative path to where object files are written
#   A_CONFIG_DIR_PND - Root-relative path to the project's PND staging dir
#   A_CONFIG_DIR_SRC - Root-relative path to the project's source tree
#
A_CONFIG_DIR_AST ?= assets
A_CONFIG_DIR_BIN ?= bin
A_CONFIG_DIR_OBJ ?= obj
A_CONFIG_DIR_PND ?= pnd
A_CONFIG_DIR_ROOT ?= ..
A_CONFIG_DIR_SRC ?= src

#
# Project files
#
#   A_CONFIG_FILE_APP - Target binary file name
#   A_CONFIG_FILE_EMBED - Space-separated file and dir paths relative to root
#   A_CONFIG_FILE_EMBED_EMSCRIPTEN - Same as above, but using Emscripten
#   A_CONFIG_FILE_PND - Target PND file name
#
A_CONFIG_FILE_APP ?= a.out
A_CONFIG_FILE_EMBED ?=
A_CONFIG_FILE_EMBED_EMSCRIPTEN ?=
A_CONFIG_FILE_PND ?= $(A_CONFIG_FILE_APP).pnd

#
# Systems and platforms
#
A_CONFIG_SYSTEM_CAANOO ?= 0
A_CONFIG_SYSTEM_EMSCRIPTEN ?= 0
A_CONFIG_SYSTEM_GP2X ?= 0
A_CONFIG_SYSTEM_LINUX ?= 0
A_CONFIG_SYSTEM_MINGW ?= 0
A_CONFIG_SYSTEM_PANDORA ?= 0
A_CONFIG_SYSTEM_WIZ ?= 0

#
# System traits
#
A_CONFIG_TRAIT_DESKTOP ?= 0
A_CONFIG_TRAIT_KEYBOARD ?= 0

#
# Libraries
#
#   A_CONFIG_LIB_RENDER - Possible values: SOFTWARE, SDL
#   A_CONFIG_LIB_SDL - 1 or 2 if using SDL
#   A_CONFIG_LIB_SDL_CONFIG - Path to sdl-config host binary
#   A_CONFIG_LIB_SDL_TIME - Whether to use the SDL timer
#
A_CONFIG_LIB_SDL ?= 0
A_CONFIG_LIB_SDL_TIME ?= 0

ifeq ($(A_CONFIG_LIB_SDL), 2)
    A_CONFIG_LIB_RENDER ?= SDL
else
    A_CONFIG_LIB_RENDER ?= SOFTWARE
endif

ifdef A_CONFIG_LIB_SDL_CONFIG
    A_CONFIG_BUILD_CFLAGS += $(shell $(A_CONFIG_LIB_SDL_CONFIG) --cflags)

    ifeq ($(A_CONFIG_LIB_SDL), 1)
        A_CONFIG_BUILD_LIBS += $(shell $(A_CONFIG_LIB_SDL_CONFIG) --libs) -lSDL_mixer
    else ifeq ($(A_CONFIG_LIB_SDL), 2)
        A_CONFIG_BUILD_LIBS += $(shell $(A_CONFIG_LIB_SDL_CONFIG) --libs) -lSDL2_mixer
    endif
endif

#
# Make
#
#   A_CONFIG_MAKE_CLEAN - Targets to run before the default clean target
#

#
# Screen properties
#
#   A_CONFIG_SCREEN_ALLOCATE - Allocate a buffer or try to use the platform's
#   A_CONFIG_SCREEN_FULLSCREEN - Whether to start in fullscreen mode
#   A_CONFIG_SCREEN_MAXIMIZED - Whether the window should start maximized
#   A_CONFIG_SCREEN_HARDWARE_HEIGHT, WIDTH - Device-specific resolution
#   A_CONFIG_SCREEN_HEIGHT, WIDTH - Logical screen resolution
#   A_CONFIG_SCREEN_VSYNC - Try to use V-sync
#   A_CONFIG_SCREEN_WIZ_FIX - Fix screen tearing on GP2X Wiz
#   A_CONFIG_SCREEN_ZOOM - Integer zoom when showing the logical screen
#
A_CONFIG_SCREEN_HARDWARE_WIDTH ?= 0
A_CONFIG_SCREEN_HARDWARE_HEIGHT ?= 0

ifneq ($(A_CONFIG_SCREEN_HARDWARE_WIDTH), 0)
    A_CONFIG_SCREEN_WIDTH ?= $(A_CONFIG_SCREEN_HARDWARE_WIDTH)
endif

ifneq ($(A_CONFIG_SCREEN_HARDWARE_HEIGHT), 0)
    A_CONFIG_SCREEN_HEIGHT ?= $(A_CONFIG_SCREEN_HARDWARE_HEIGHT)
endif

A_CONFIG_SCREEN_WIDTH ?= 320
A_CONFIG_SCREEN_HEIGHT ?= 240

ifdef A_CONFIG_SCREEN_ZOOM
    ifneq ($(A_CONFIG_SCREEN_ZOOM), 1)
        A_CONFIG_SCREEN_ALLOCATE := 1
    endif
endif

ifeq ($(A_CONFIG_LIB_SDL), 2)
    A_CONFIG_SCREEN_ALLOCATE := 1
    A_CONFIG_SCREEN_VSYNC ?= 1
endif

ifeq ($(A_CONFIG_SYSTEM_WIZ), 1)
    A_CONFIG_SCREEN_WIZ_FIX ?= 1
endif

ifeq ($(A_CONFIG_SCREEN_WIZ_FIX), 1)
    A_CONFIG_SCREEN_ALLOCATE := 1
endif

A_CONFIG_SCREEN_ALLOCATE ?= 0
A_CONFIG_SCREEN_FULLSCREEN ?= 0
A_CONFIG_SCREEN_MAXIMIZED ?= 1
A_CONFIG_SCREEN_VSYNC ?= 0
A_CONFIG_SCREEN_WIZ_FIX ?= 0
A_CONFIG_SCREEN_ZOOM ?= 1

#
# FPS
#
A_CONFIG_FPS_TICK ?= 30
A_CONFIG_FPS_DRAW ?= 30

#
# C defines
#
A_CONFIG_BUILD_CFLAGS += \
    -DA_CONFIG_APP_AUTHOR=\"$(A_CONFIG_APP_AUTHOR)\" \
    -DA_CONFIG_APP_NAME=\"$(A_CONFIG_APP_NAME)\" \
    -DA_CONFIG_APP_VERSION=\"$(A_CONFIG_APP_VERSION_MAJOR).$(A_CONFIG_APP_VERSION_MINOR).$(A_CONFIG_APP_VERSION_MICRO)\" \
    -DA_CONFIG_BUILD_DEBUG=$(A_CONFIG_BUILD_DEBUG) \
    -DA_CONFIG_SYSTEM_CAANOO=$(A_CONFIG_SYSTEM_CAANOO) \
    -DA_CONFIG_SYSTEM_EMSCRIPTEN=$(A_CONFIG_SYSTEM_EMSCRIPTEN) \
    -DA_CONFIG_SYSTEM_GP2X=$(A_CONFIG_SYSTEM_GP2X) \
    -DA_CONFIG_SYSTEM_LINUX=$(A_CONFIG_SYSTEM_LINUX) \
    -DA_CONFIG_SYSTEM_MINGW=$(A_CONFIG_SYSTEM_MINGW) \
    -DA_CONFIG_SYSTEM_PANDORA=$(A_CONFIG_SYSTEM_PANDORA) \
    -DA_CONFIG_SYSTEM_WIZ=$(A_CONFIG_SYSTEM_WIZ) \
    -DA_CONFIG_TRAIT_DESKTOP=$(A_CONFIG_TRAIT_DESKTOP) \
    -DA_CONFIG_TRAIT_KEYBOARD=$(A_CONFIG_TRAIT_KEYBOARD) \
    -DA_CONFIG_FPS_TICK=$(A_CONFIG_FPS_TICK) \
    -DA_CONFIG_FPS_DRAW=$(A_CONFIG_FPS_DRAW) \
    -DA_CONFIG_LIB_SDL=$(A_CONFIG_LIB_SDL) \
    -DA_CONFIG_LIB_SDL_TIME=$(A_CONFIG_LIB_SDL_TIME) \
    -DA_CONFIG_SCREEN_HARDWARE_WIDTH=$(A_CONFIG_SCREEN_HARDWARE_WIDTH) \
    -DA_CONFIG_SCREEN_HARDWARE_HEIGHT=$(A_CONFIG_SCREEN_HARDWARE_HEIGHT) \
    -DA_CONFIG_SCREEN_WIDTH=$(A_CONFIG_SCREEN_WIDTH) \
    -DA_CONFIG_SCREEN_HEIGHT=$(A_CONFIG_SCREEN_HEIGHT) \
    -DA_CONFIG_SCREEN_ALLOCATE=$(A_CONFIG_SCREEN_ALLOCATE) \
    -DA_CONFIG_SCREEN_FULLSCREEN=$(A_CONFIG_SCREEN_FULLSCREEN) \
    -DA_CONFIG_SCREEN_MAXIMIZED=$(A_CONFIG_SCREEN_MAXIMIZED) \
    -DA_CONFIG_SCREEN_VSYNC=$(A_CONFIG_SCREEN_VSYNC) \
    -DA_CONFIG_SCREEN_WIZ_FIX=$(A_CONFIG_SCREEN_WIZ_FIX) \
    -DA_CONFIG_SCREEN_ZOOM=$(A_CONFIG_SCREEN_ZOOM) \

ifeq ($(A_CONFIG_LIB_RENDER), SDL)
    A_CONFIG_BUILD_CFLAGS += -DA_CONFIG_LIB_RENDER_SDL=1
else ifeq ($(A_CONFIG_LIB_RENDER), SOFTWARE)
    A_CONFIG_BUILD_CFLAGS += -DA_CONFIG_LIB_RENDER_SOFTWARE=1
endif
