#!/usr/bin/env python3

"""
    Copyright 2017-2019 Alex Margarit <alex@alxm.org>
    This file is part of a2x, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from utils.output import Output
from utils.tool import Tool

class ComponentTool(Tool):
    def main(self):
        comp_name = self.get_arg('ComponentName')
        comp_c = os.path.join('.', 'component_{}.c'.format(comp_name.lower()))
        comp_h = os.path.join('.', 'component_{}.h'.format(comp_name.lower()))

        for f in [comp_c, comp_h]:
            if os.path.exists(f):
                self.output.error('{} already exists'.format(f))

        struct_name = 'C{}'.format(comp_name)

        self.writefile(comp_c,
"""\
#include "component_{name}.h"

struct {ctype} {{
    int value;
}};

const size_t c_{name}_size = sizeof({ctype});

void c_{name}_init(void* Self)
{{
    {ctype}* {localVar} = Self;

    {localVar}->value = 1;
}}

void c_{name}_free(void* Self)
{{
    {ctype}* {localVar} = Self;

    A_UNUSED({localVar});
}}

int c_{name}_valueGet(const {ctype}* {paramVar})
{{
    return {paramVar}->value;
}}

void c_{name}_valueSet({ctype}* {paramVar}, int Value)
{{
    {paramVar}->value = Value;
}}
""".format(ctype=struct_name,
           name=comp_name.lower(),
           paramVar=comp_name,
           localVar=comp_name[0].lower() + comp_name[1 :]))

        self.writefile(comp_h,
"""\
#pragma once

#include <a2x.h>

typedef struct {ctype} {ctype};

extern const size_t c_{name}_size;
extern AComponentInit c_{name}_init;
extern AFree c_{name}_free;

extern int c_{name}_valueGet(const {ctype}* {paramVar});
extern void c_{name}_valueSet({ctype}* {paramVar}, int Value);
""".format(ctype=struct_name,
           name=comp_name.lower(),
           paramVar=comp_name))

if __name__ == '__main__':
    ComponentTool('ComponentName').run()
