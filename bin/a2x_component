#!/usr/bin/env python3

"""
    Copyright 2017 Alex Margarit

    This file is part of a2x-framework.

    a2x-framework is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    a2x-framework is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with a2x-framework.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from utils.output import Output
from utils.tool import Tool

class ComponentTool(Tool):
    def main(self):
        comp_name = self.get_arg('ComponentName').strip()
        comp_lowername = comp_name.lower()
        comp_c = os.path.join('.', 'component_{}.c'.format(comp_lowername))
        comp_h = os.path.join('.', 'component_{}.h'.format(comp_lowername))

        for f in [comp_c, comp_h]:
            if os.path.exists(f):
                self.output.error('Error: {} already exists'.format(f))

        struct_name = 'ZComp{}'.format(comp_name)

        self.writefile(comp_c,
"""\
#include <a2x.h>

#include "component_{name}.h"

struct {struct} {{
    int x;
}};

size_t z_comp_{name}_size(void)
{{
    return sizeof({struct});
}}

void z_comp_{name}_init({struct}* {varname})
{{
    A_UNUSED({varname});
}}

void z_comp_{name}_free(void* Self)
{{
    {struct}* {name} = Self;

    A_UNUSED({name});
}}
""".format(struct=struct_name, name=comp_lowername, varname=comp_name))

        self.writefile(comp_h,
"""\
typedef struct {struct} {struct};

extern size_t z_comp_{name}_size(void);
extern void z_comp_{name}_init({struct}* {varname});
extern AComponentFree z_comp_{name}_free;
""".format(struct=struct_name, name=comp_lowername, varname=comp_name))

if __name__ == '__main__':
    ComponentTool('ComponentName').run()
