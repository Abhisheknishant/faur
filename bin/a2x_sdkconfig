#!/usr/bin/env python3

"""
    Copyright 2016 Alex Margarit

    This file is part of a2x-framework.

    a2x-framework is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    a2x-framework is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with a2x-framework.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import re

from utils.output import Output
from utils.tool import Tool

class Sdk:
    def __init__(self, title):
        self.title = title
        self.variables = {}

    def add_var(self, config_name, makefile_name):
        self.variables[config_name] = [makefile_name, None]

    def set_var(self, name, value):
        self.variables[name][1] = value

    def has_var(self, name):
        return name in self.variables

    def is_complete(self):
        for name in self.variables:
            if self.variables[name][1] is None:
                return False

        return True

    def __str__(self):
        return '\n'.join([
            '{} = {}'.format(self.variables[name][0], self.variables[name][1])
            for name in self.variables])

class SdkConfigTool(Tool):
    def main(self):
        config_read = self.get_arg('UserConfig')
        config_write = self.get_arg('GeneratedConfig')

        if not os.path.exists(config_read):
            Output.error('{} does not exist'.format(config_read))

        sdks = {}

        sdks['mingw32'] = Sdk('Mingw32 (Windows 32bit)')
        sdks['mingw32'].add_var('root', 'MINGW32_ROOT')
        sdks['mingw32'].add_var('arch', 'MINGW32_ARCH')

        sdks['mingw64'] = Sdk('Mingw64 (Windows 64bit)')
        sdks['mingw64'].add_var('root', 'MINGW64_ROOT')
        sdks['mingw64'].add_var('arch', 'MINGW64_ARCH')

        sdks['caanoo'] = Sdk('GPH SDK (Caanoo)')
        sdks['caanoo'].add_var('root', 'CAANOO_ROOT')
        sdks['caanoo'].add_var('toolchain', 'CAANOO_GLIBC')

        sdks['open2x'] = Sdk('Open2x SDK (GP2X, Wiz)')
        sdks['open2x'].add_var('root', 'OPEN2X_ROOT')
        sdks['open2x'].add_var('toolchain', 'OPEN2X_GLIBC')

        sdks['pandora'] = Sdk('Pandora SDK (Open Pandora)')
        sdks['pandora'].add_var('root', 'PANDORA_ROOT')
        sdks['pandora'].add_var('toolchain', 'PANDORA_TOOLCHAIN')
        sdks['pandora'].add_var('utils', 'PANDORA_SDKUTILS')

        re_assignment = re.compile('^\s*sdk\.(.*?)\.(.*?)\s*=\s*(.*?)\s*$')

        for line in self.readtext(config_read).splitlines():
            assignment = re_assignment.match(line)

            if not assignment:
                continue

            sdk_name = assignment.group(1)
            variable = assignment.group(2)
            value = assignment.group(3)

            if sdk_name not in sdks:
                Output.note('You can comment out config lines with #')
                Output.error('Unknown SDK {} - only aware of {}'
                    .format(sdk_name, ', '.join(sorted([s for s in sdks]))))

            sdk = sdks[sdk_name]

            if not sdk.has_var(variable):
                Output.note('You can comment out config lines with #')
                Output.error('Unknown variable {}.{} - only aware of {}'
                    .format(sdk_name, variable,
                    ', '.join(sorted([v for v in sdk.variables]))))

            sdk.set_var(variable, value)

            if sdk.is_complete():
                Output.note('Processed config for {}'.format(sdk.title))

        out = '\n'.join([str(sdks[sdk]) for sdk in sdks])
        self.writefile(config_write, out)

if __name__ == '__main__':
    tool = SdkConfigTool('UserConfig GeneratedConfig')
    tool.run()
