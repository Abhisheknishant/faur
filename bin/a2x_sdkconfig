#!/usr/bin/env python3

"""
    Copyright 2016-2019 Alex Margarit <alex@alxm.org>
    This file is part of a2x, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import re

from utils.tool import Tool

g_tool = Tool('UserConfig [GeneratedConfig]')

def main():
    config_read = g_tool.get_arg('UserConfig')
    config_write = g_tool.get_arg('[GeneratedConfig]')

    if not os.path.exists(config_read):
        g_tool.write_text(config_read, """\
sdk.emscripten.root = /opt/emsdk

sdk.mingw32.root = /usr
sdk.mingw32.arch = i686-w64-mingw32

sdk.mingw64.root = /usr
sdk.mingw64.arch = x86_64-w64-mingw32

sdk.open2x.root = /opt/open2x
sdk.open2x.toolchain = gcc-4.1.1-glibc-2.3.6

sdk.caanoo.root = /opt/gph_sdk
sdk.caanoo.toolchain = tools/gcc-4.2.4-glibc-2.7-eabi

sdk.pandora.root = /opt/pandora
sdk.pandora.toolchain = arm-2013.11
sdk.pandora.utils = sdk_utils
""")
    elif not os.path.isfile(config_read):
        g_tool.out.error('{} is not a file'.format(config_read))

    if config_write == '':
        return

    sdks = {}

    def addSdk(Id, Title):
        sdks[Id] = Sdk(Id, Title)
        return sdks[Id]

    emscripten = addSdk('emscripten', 'Emscripten (Web)')
    emscripten.add_var('root')

    mingw32 = addSdk('mingw32', 'Mingw32 (Windows 32bit)')
    mingw32.add_var('root')
    mingw32.add_var('arch')

    mingw64 = addSdk('mingw64', 'Mingw64 (Windows 64bit)')
    mingw64.add_var('root')
    mingw64.add_var('arch')

    caanoo = addSdk('caanoo', 'GPH SDK (Caanoo)')
    caanoo.add_var('root')
    caanoo.add_var('toolchain')

    open2x = addSdk('open2x', 'Open2x SDK (GP2X, Wiz)')
    open2x.add_var('root')
    open2x.add_var('toolchain')

    pandora = addSdk('pandora', 'Pandora SDK (Open Pandora)')
    pandora.add_var('root')
    pandora.add_var('toolchain')
    pandora.add_var('utils')

    re_assignment = re.compile('^\s*sdk\.(.*?)\.(.*?)\s*=\s*(.*?)\s*$')

    for line in g_tool.read_text(config_read).splitlines():
        assignment = re_assignment.match(line)

        if not assignment:
            if len(line.strip()) > 0:
                g_tool.out.note('Ignoring line: "{}"'.format(line))

            continue

        sdk_name = assignment.group(1)
        variable = assignment.group(2)
        value = assignment.group(3)

        if sdk_name not in sdks:
            g_tool.out.note('You can comment out config lines with #')
            g_tool.out.error('Unknown SDK {} - only aware of {}'.format(
                sdk_name,
                ', '.join(sorted([s for s in sdks]))))

        sdk = sdks[sdk_name]

        if not sdk.has_var(variable):
            g_tool.out.note('You can comment out config lines with #')
            g_tool.out.error('Unknown variable {}.{} - only aware of {}'.format(
                sdk_name,
                variable,
                ', '.join(sorted([v for v in sdk.variables]))))

        sdk.set_var(variable, value)

        if sdk.is_complete():
            g_tool.out.note('Processed config for {}'.format(sdk.title))

    out = '\n'.join([str(sdks[sdk]) for sdk in sdks]) + '\n'
    g_tool.write_text(config_write, out)

class Sdk:
    def __init__(self, id, title):
        self.prefix = 'A_SDK_' + id.upper() + '_'
        self.title = title
        self.variables = {}

    def add_var(self, config_name):
        makefile_var = self.prefix + config_name.replace('.', '_').upper()
        self.variables[config_name] = [makefile_var, None]

    def set_var(self, name, value):
        self.variables[name][1] = value

    def has_var(self, name):
        return name in self.variables

    def is_complete(self):
        for name in self.variables:
            if self.variables[name][1] is None:
                return False

        return True

    def __str__(self):
        return '\n'.join([
            '{} = {}'.format(self.variables[name][0], self.variables[name][1])
                for name in self.variables])

if __name__ == '__main__':
    main()
