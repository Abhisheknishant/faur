#!/usr/bin/env python3

"""
    Copyright 2019 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import re

from PIL import Image

from utils.tool import Tool

g_tool = Tool('Image.file GenFile.c/.h VarName Bpp ColorKeyHex')

def main():
    image_file = g_tool.get_arg('Image.file')
    target_file = g_tool.get_arg('GenFile.c/.h')
    var_name = g_tool.sanitize_c_var(g_tool.get_arg('VarName'))
    bpp = int(g_tool.get_arg('Bpp'))
    color_key = g_tool.get_arg('ColorKeyHex')

    supported_bpp = [16, 32]

    if bpp not in supported_bpp:
        g_tool.usage('Bpp {} not supported, only {}'.format(bpp, supported_bpp))

    if not re.match('^0[xX][0-9a-fA-F]{6}$', color_key):
        g_tool.usage('ColorKeyHex {} not a 0xRRGGBB hex'.format(color_key))

    color_key_hex = color_key[2 : ]

    color_key_pixel = (
        int(color_key_hex[0 : 2], 16),
        int(color_key_hex[2 : 4], 16),
        int(color_key_hex[4 : 6], 16)
    )

    if target_file.endswith('.h'):
        content = process_h(var_name)
    elif target_file.endswith('.c'):
        content = process_c(
                    image_file, target_file, var_name, bpp, color_key_pixel)
    else:
        g_tool.usage('GenFile name must end with .c or .h')

    g_tool.write_text(target_file, content)

def process_h(var_name):
    content = """\
#include <faur.h>

extern const FSprite* const f_gfx_{var};
""".format(var = var_name)

    return content

def process_c(image_file, target_file, var_name, bpp, color_key):
    image = Image.open(image_file).convert('RGB')

    width, height = image.size
    pixels = image.load()

    grid_match = re.match('^.+_([0-9]+)x([0-9]+)\.\w+$', image_file)

    if grid_match:
        frame_width = int(grid_match.group(1))
        frame_height = int(grid_match.group(2))
    else:
        frame_width = width
        frame_height = height

    frames_num = 0
    pixels_fmt = ''
    spans_fmt = ''
    spans_arrays = ''

    for starty in range(0, height, frame_height):
        for startx in range(0, width, frame_width):
            frame_pixels = []

            for y in range(starty, starty + frame_height):
                for x in range(startx, startx + frame_width):
                    frame_pixels.append(pixels[x, y])

            spans_fmt2, spans_arrays2 = process_spans(frame_pixels,
                                                      frame_width,
                                                      frame_height,
                                                      color_key,
                                                      var_name,
                                                      frames_num)

            spans_fmt += spans_fmt2
            spans_arrays += spans_arrays2

            pixels_fmt += '\n    ' + process_pixels(frame_pixels, bpp) + '\n'
            frames_num += 1

    content = """\
#include <faur.v.h>

static const FPixel f_gfx__buffer__{var}[{width} * {height} * {frames_num}] = {{{pixels}}};{spans}

static const struct {{
    FPixels pixels;
    FPlatformTexture* textures[{frames_num}];
}} f_gfx__sprite__{var} = {{
    {{
        {width},
        {height},
        {frames_num},
        {width} * {height},
        {width} * {height} * sizeof(FPixel),
        F_PIXELS__CONST,
        (FPixel*)f_gfx__buffer__{var},
    }},
    {{{textures}
    }},
}};

const FSprite* const f_gfx_{var} = (const FSprite*)&f_gfx__sprite__{var};
""".format(var = var_name,
           width = frame_width,
           height = frame_height,
           frames_num = frames_num,
           pixels = pixels_fmt,
           spans = spans_fmt,
           textures = spans_arrays)

    return content

def spans(pixels, width, height, color_key):
    # Spans format for each scanline:
    # (NumSpans << 1 | start draw/transparent), len0, len1, ...
    spans = []

    for y in range(0, height):
        line_start = len(spans)
        span_length = 0
        last_state = 0 if pixels[y * width] == color_key else 1 # initial state

        spans.append(last_state)

        for x in range(0, width):
            new_state = 0 if pixels[y * width + x] == color_key else 1

            if new_state == last_state:
                span_length += 1 # keep growing current span
            else:
                spans.append(span_length) # record the just-ended span length

                last_state = new_state
                span_length = 1 # start a new span from this pixel

        spans[line_start] |= (len(spans) - line_start) << 1 # record # of spans
        spans.append(span_length) # record the last span's length

    return spans

def process_spans(frame_pixels, frame_width, frame_height, color_key, var_name, frames_num):
    spans_data = spans(frame_pixels, frame_width, frame_height, color_key)

    spans_fmt = """

static const unsigned f_gfx__spans__{var}__{num}[] = {{
    {spans_data}
}};\
""".format(var = var_name,
           num = frames_num,
           spans_data = ', '.join([str(s) for s in spans_data]))

    spans_arrays = """
        (FPlatformTexture*)f_gfx__spans__{var}__{num},\
""".format(var = var_name,
           num = frames_num)

    return spans_fmt, spans_arrays

def process_pixels(frame_pixels, bpp):
    pixels_hex = []

    if bpp == 16:
        for p in frame_pixels:
            r, g, b = p
            packed = ((r >> 3) << 11) | ((g >> 2) << 5) | (b >> 3)

            pixels_hex.append('0x{:0>4x}'.format(packed))
    elif bpp == 32:
        for p in frame_pixels:
            r, g, b = p
            packed = (r << 24) | (g << 16) | (b << 8)

            pixels_hex.append('0x{:0>8x}'.format(packed))

    return ', '.join(pixels_hex) + ','

if __name__ == '__main__':
    main()
