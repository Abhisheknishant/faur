#!/usr/bin/env python3

"""
    Copyright 2019 Alex Margarit <alex@alxm.org>
    This file is part of Faur, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3,
    as published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import re

from PIL import Image

from utils.tool import Tool

g_tool = Tool('Image.file GenFile.c/.h VarName ColorFormat ColorKeyHex')

def formatRgb565(Pixel):
    r, g, b = Pixel
    packed = ((r >> 3) << 11) | ((g >> 2) << 5) | ((b >> 3) << 0)

    return '0x{:0>4x}'.format(packed)

def formatRgba5551(Pixel):
    r, g, b = Pixel
    packed = ((r >> 3) << 11) | ((g >> 3) << 6) | ((b >> 3) << 1)

    return '0x{:0>4x}'.format(packed)

def formatRgba8888(Pixel):
    r, g, b = Pixel
    packed = (r << 24) | (g << 16) | (b << 8)

    return '0x{:0>8x}'.format(packed)

def formatArgb8888(Pixel):
    r, g, b = Pixel
    packed = (r << 16) | (g << 8) | (b << 0)

    return '0x{:0>8x}'.format(packed)

def formatAbgr8888(Pixel):
    r, g, b = Pixel
    packed = (b << 16) | (g << 8) | (r << 0)

    return '0x{:0>8x}'.format(packed)

g_formats = {
    'F_COLOR_FORMAT_RGB_565': formatRgb565,
    'F_COLOR_FORMAT_RGBA_5551': formatRgba5551,
    'F_COLOR_FORMAT_RGBA_8888': formatRgba8888,
    'F_COLOR_FORMAT_ARGB_8888': formatArgb8888,
    'F_COLOR_FORMAT_ABGR_8888': formatAbgr8888,
}

def main():
    image_file = g_tool.get_arg('Image.file')
    target_file = g_tool.get_arg('GenFile.c/.h')
    var_name = g_tool.sanitize_c_var(g_tool.get_arg('VarName'))
    color_fmt = g_tool.get_arg('ColorFormat')
    color_key = g_tool.get_arg('ColorKeyHex')

    if color_fmt not in g_formats:
        g_tool.usage('ColorFormat {} not supported, only {}'
                        .format(color_fmt, supported_fmt))

    if not re.match('^0[xX][0-9a-fA-F]{6}$', color_key):
        g_tool.usage('ColorKeyHex {} not a 0xRRGGBB hex'.format(color_key))

    color_key_hex = color_key[2 : ]

    color_key_pixel = (
        int(color_key_hex[0 : 2], 16),
        int(color_key_hex[2 : 4], 16),
        int(color_key_hex[4 : 6], 16)
    )

    if target_file.endswith('.h'):
        content = process_h(var_name)
    elif target_file.endswith('.c'):
        content = process_c(var_name, image_file, color_fmt, color_key_pixel)
    else:
        g_tool.usage('GenFile must be a .c or .h file')

    g_tool.write_text(target_file, content)

def process_h(var_name):
    content = """\
#include <faur.h>

extern const FSprite* const f_gfx_{var};
""".format(var = var_name)

    return content

def process_c(var_name, image_file, color_fmt, color_key):
    image = Image.open(image_file).convert('RGB')

    width, height = image.size
    pixels = image.load()

    grid_match = re.match('^.+_([0-9]+)x([0-9]+)\.\w+$', image_file)

    if grid_match:
        frame_width = int(grid_match.group(1))
        frame_height = int(grid_match.group(2))
    else:
        frame_width = width
        frame_height = height

    frames_pixels = []

    for starty in range(0, height, frame_height):
        for startx in range(0, width, frame_width):
            frame_pixels = []

            for y in range(starty, starty + frame_height):
                for x in range(startx, startx + frame_width):
                    frame_pixels.append(pixels[x, y])

            frames_pixels.append(frame_pixels)

    pixel_buffers = ''
    span_buffers = ''
    span_vars = ''

    for fmt in g_formats:
        pixels_fmt = ''

        for frame_pixels in frames_pixels:
            pixels_fmt += '        '

            for pixel in frame_pixels:
                pixels_fmt += '{}, '.format(g_formats[fmt](pixel))

            pixels_fmt += '\n'

        pixel_buffers += """\
    #if F_CONFIG_SCREEN_FORMAT == {fmt}
{pixel_buffer}    #endif
""".format(fmt = fmt, pixel_buffer = pixels_fmt)

    for frame_index, frame_pixels in enumerate(frames_pixels):
        spans = spans_make(frame_pixels, frame_width, frame_height, color_key)

        span_buffers += """\
static const unsigned f_gfx__spans__{var}__{num}[] = {{
    {spans_data}
}};
""".format(var = var_name,
           num = frame_index,
           spans_data = ', '.join([str(s) for s in spans]))

        span_vars += """\
            (FPlatformTexture*)f_gfx__spans__{var}__{num},
""".format(var = var_name,
               num = frame_index)

    content = """\
#include <faur.v.h>

#if F_CONFIG_LIB_RENDER_SOFTWARE
    #define F__GEN_CONST const
#else
    #define F__GEN_CONST
#endif

static const FColorPixel f_gfx__buffer__{var}[{width} * {height} * {frames_num}] = {{
{pixel_buffers}}};

#if F_CONFIG_LIB_RENDER_SOFTWARE
{span_buffers}#endif

static F__GEN_CONST struct {{
    FPixels pixels;
    FPlatformTexture* textures[{frames_num}];
}} f_gfx__sprite__{var} = {{
    {{
        {width},
        {height},
        {frames_num},
        {width} * {height},
        {width} * {height} * sizeof(FColorPixel),
        F_PIXELS__CONST,
        (FColorPixel*)f_gfx__buffer__{var},
    }},
    {{
        #if F_CONFIG_LIB_RENDER_SOFTWARE
{span_vars}        #else
            NULL,
        #endif
    }},
}};

const FSprite* const f_gfx_{var} = (const FSprite*)&f_gfx__sprite__{var};
""".format(var = var_name,
           width = frame_width,
           height = frame_height,
           frames_num = len(frames_pixels),
           pixel_buffers = pixel_buffers,
           span_buffers = span_buffers,
           span_vars = span_vars)

    return content

def spans_make(pixels, width, height, color_key):
    # Spans format for each scanline:
    # (NumSpans << 1 | start draw/transparent), len0, len1, ...
    spans = []

    for y in range(0, height):
        line_start = len(spans)
        span_length = 0
        last_state = 0 if pixels[y * width] == color_key else 1 # initial state

        spans.append(last_state)

        for x in range(0, width):
            new_state = 0 if pixels[y * width + x] == color_key else 1

            if new_state == last_state:
                span_length += 1 # keep growing current span
            else:
                spans.append(span_length) # record the just-ended span length

                last_state = new_state
                span_length = 1 # start a new span from this pixel

        spans[line_start] |= (len(spans) - line_start) << 1 # record # of spans
        spans.append(span_length) # record the last span's length

    return spans

if __name__ == '__main__':
    main()
