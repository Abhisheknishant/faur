#!/usr/bin/env python3

"""
    Copyright 2016-2019 Alex Margarit <alex@alxm.org>
    This file is part of a2x, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from utils.tool import Tool

g_tool = Tool('ProjectName')

def main():
    project_name = g_tool.get_arg('ProjectName').replace(' ', '-')

    if project_name != os.path.basename(project_name):
        g_tool.out.error('Project name cannot be a path'.format(project_name))

    project_path = os.path.abspath(project_name)

    g_tool.check_files_not_exist(project_path)

    dir_root = Dir(project_path)
    dir_assets = dir_root.add_subdir('assets')
    dir_build = dir_root.add_subdir('build')
    dir_make = dir_build.add_subdir('make')
    dir_source = dir_root.add_subdir('src')

    author = '<your username>'

    for key in ['USER', 'USERNAME', 'LOGNAME']:
        if key in os.environ:
            author = os.environ[key]
            break

    dir_make.write_file('Makefile',
"""\
A_CONFIG_APP_AUTHOR := {author}
A_CONFIG_APP_NAME := {name}

A_CONFIG_APP_VERSION_MAJOR := 1
A_CONFIG_APP_VERSION_MINOR := 0
A_CONFIG_APP_VERSION_MICRO := 0

include $(A2X_PATH)/make/dev.mk
""".format(author = author, name = project_name))

    dir_source.write_file('main.c',
"""\
#include <a2x.h>

AStateHandler drawBox;

void a_main(void)
{{
    a_state_push(drawBox);
}}

void drawBox(void)
{{
    static struct {{
        int x, y;
    }} context;

    A_STATE_INIT
    {{
        context.x = a_screen_sizeGetWidth() / 2;
        context.y = a_screen_sizeGetHeight() / 2;
    }}

    A_STATE_TICK
    {{
        if(a_button_read(A_KEY_UP) || a_button_read(A_BUTTON_UP)) {{
            context.y--;
        }}

        if(a_button_read(A_KEY_DOWN) || a_button_read(A_BUTTON_DOWN)) {{
            context.y++;
        }}

        if(a_button_read(A_KEY_LEFT) || a_button_read(A_BUTTON_LEFT)) {{
            context.x--;
        }}

        if(a_button_read(A_KEY_RIGHT) || a_button_read(A_BUTTON_RIGHT)) {{
            context.x++;
        }}
    }}

    A_STATE_DRAW
    {{
        a_color_baseSetHex(0xaaff88);
        a_draw_fill();

        a_color_baseSetHex(0xffaa44);
        a_draw_rectangle(context.x - 40, context.y - 40, 80, 80);
    }}

    A_STATE_FREE
    {{
        a_out_info("Bye!");
    }}
}}
""".format())

    dir_root.write_file('.gitignore',
"""\
/build/builds/
/build/shared/
""")

    g_tool.shell('cd {} && git init && git add .'.format(dir_root.path))
    g_tool.out.note('To build and run:')
    g_tool.out.note('cd {} && make -j run'.format(dir_make.path))

class Dir:
    def __init__(self, Path):
        self.path = Path
        self.name = os.path.basename(Path)

        os.mkdir(Path)

    def add_subdir(self, Name):
        return Dir(os.path.join(self.path, Name))

    def write_file(self, Name, Content):
        g_tool.write_text(os.path.join(self.path, Name), Content)

if __name__ == '__main__':
    main()
