#!/usr/bin/env python3

"""
    Copyright 2016, 2017 Alex Margarit

    This file is part of a2x-framework.

    a2x-framework is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    a2x-framework is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with a2x-framework.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from utils.output import Output
from utils.shell import Shell
from utils.tool import Tool

class NewTool(Tool):
    def main(self):
        project_name = self.get_arg('ProjectName').replace(' ', '-')
        project_dir = os.path.abspath(project_name)

        if project_name != os.path.basename(project_name):
            Output.error('Project name cannot be a path'.format(project_name))

        if os.path.exists(project_dir):
            Output.error('{} already exists'.format(project_dir))

        author = '<your username>'

        for key in ['USER', 'USERNAME', 'LOGNAME']:
            if key in os.environ:
                author = os.environ[key]
                break

        class Dir:
            def __init__(self, Tool, Name):
                self.name = Name
                self.path = os.path.join(project_dir, Name)

                Tool.makedir(self.path)

        dir_bin = Dir(self, 'bin')
        dir_gfx = Dir(self, 'gfx')
        dir_mke = Dir(self, 'make')
        dir_obj = Dir(self, 'obj')
        dir_sfx = Dir(self, 'sfx')
        dir_src = Dir(self, 'src')

        self.symlink(os.path.join('..', dir_gfx.name),
                     os.path.join(dir_bin.path, dir_gfx.name))

        self.symlink(os.path.join('..', dir_sfx.name),
                     os.path.join(dir_bin.path, dir_sfx.name))

        self.writefile(os.path.join(dir_mke.path, 'Makefile'),
"""\
A_APP_NAME = {0}

#
# You can set A2X_PATH to a hard-coded value
# if you do not have a2x/bin in your $PATH
#
A2X_PATH := $(shell a2x_path)
include $(A2X_PATH)/make/project/Makefile.linux
""".format(project_name))

        self.writefile(os.path.join(dir_src.path, 'main.c'),
"""\
#include <a2x.h>

A_SETUP
{{
    a_settings_set("app.title", "{0}");
    a_settings_set("app.version", "1.0");
    a_settings_set("app.author", "{1}");
    a_settings_set("app.output.on", "yes");
}}

A_STATE(drawBox)
{{
    static struct {{
        int x, y;
        AInputButton* up;
        AInputButton* down;
        AInputButton* left;
        AInputButton* right;
    }} context;

    A_STATE_INIT
    {{
        context.x = a_screen_getWidth() / 2;
        context.y = a_screen_getHeight() / 2;

        context.up = a_button_new("key.up");
        context.down = a_button_new("key.down");
        context.left = a_button_new("key.left");
        context.right = a_button_new("key.right");
    }}

    A_STATE_LOOP
    {{
        if(a_button_getPressed(context.up)) {{
            context.y--;
        }} else if(a_button_getPressed(context.down)) {{
            context.y++;
        }}

        if(a_button_getPressed(context.left)) {{
            context.x--;
        }} else if(a_button_getPressed(context.right)) {{
            context.x++;
        }}

        A_STATE_LOOP_DRAW
        {{
            a_pixel_setHex(0xaaff88);
            a_draw_fill();

            a_pixel_setHex(0xffaa44);
            a_draw_rectangle(context.x - 40, context.y - 40, 80, 80);
        }}
    }}
}}

A_MAIN
{{
    a_state_new("drawBox", drawBox, "", "");
    a_state_push("drawBox");
}}
""".format(project_name, author))

        Shell.run('git init {}'.format(project_dir))

        self.writefile(os.path.join(project_dir, '.gitignore'),
"""\
/bin/
/obj/
/src/a2x_gen/
""")

        Shell.run('cd {} && git add .gitignore make/Makefile src/main.c'
            .format(project_dir))

        Output.note('To build and run:')
        Output.note('cd {} && make run'.format(dir_mke.path))

if __name__ == '__main__':
    tool = NewTool('ProjectName')
    tool.run()
