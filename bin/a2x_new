#!/usr/bin/env python3

"""
    Copyright 2016-2019 Alex Margarit <alex@alxm.org>
    This file is part of a2x, a C video game framework.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from utils.tool import Tool

class Dir:
    def __init__(self, Tool, Path):
        self.tool = Tool
        self.path = Path
        self.name = os.path.basename(Path)

        os.mkdir(Path)

    def add_subdir(self, Name):
        return Dir(self.tool, os.path.join(self.path, Name))

    def write_file(self, Name, Content):
        self.tool.writefile(os.path.join(self.path, Name), Content)

if __name__ == '__main__':
    tool = Tool('ProjectName')

    project_name = tool.get_arg('ProjectName').replace(' ', '-')

    if project_name != os.path.basename(project_name):
        tool.output.error('Project name cannot be a path'.format(project_name))

    project_path = os.path.abspath(project_name)

    if os.path.exists(project_path):
        tool.output.error('{} already exists'.format(project_path))

    dir_root = Dir(tool, project_path)
    dir_ast = dir_root.add_subdir('assets')
    dir_bin = dir_root.add_subdir('bin')
    dir_mke = dir_root.add_subdir('make')
    dir_obj = dir_root.add_subdir('obj')
    dir_src = dir_root.add_subdir('src')

    os.symlink(os.path.join('..', dir_ast.name),
               os.path.join(dir_bin.path, dir_ast.name))

    author = '<your username>'

    for key in ['USER', 'USERNAME', 'LOGNAME']:
        if key in os.environ:
            author = os.environ[key]
            break

    dir_mke.write_file('Makefile',
"""\
A_CONFIG_APP_AUTHOR := {author}
A_CONFIG_APP_BIN := {name}.bin
A_CONFIG_APP_TITLE := {name}

A_CONFIG_APP_VERSION_MAJOR := 1
A_CONFIG_APP_VERSION_MINOR := 0
A_CONFIG_APP_VERSION_MICRO := 0

A_CONFIG_STATE_NUM := main.c STATE_NUM

include $(A2X_PATH)/make/dev
""".format(author = author, name = project_name))

    dir_src.write_file('main.c',
"""\
#include <a2x.h>

enum {{
    STATE_DRAWBOX,
    STATE_NUM
}};

A_STATE(drawBox);

A_MAIN
{{
    a_state_new(STATE_DRAWBOX, drawBox, "Draw Box");

    a_state_push(STATE_DRAWBOX);
}}

A_STATE(drawBox)
{{
    static struct {{
        int x, y;
        AButton *up, *down, *left, *right;
    }} context;

    A_STATE_INIT
    {{
        context.x = a_screen_sizeGetWidth() / 2;
        context.y = a_screen_sizeGetHeight() / 2;

        context.up = a_button_new();
        a_button_bind(context.up, A_KEY_UP);
        a_button_bind(context.up, A_BUTTON_UP);

        context.down = a_button_new();
        a_button_bind(context.down, A_KEY_DOWN);
        a_button_bind(context.down, A_BUTTON_DOWN);

        context.left = a_button_new();
        a_button_bind(context.left, A_KEY_LEFT);
        a_button_bind(context.left, A_BUTTON_LEFT);

        context.right = a_button_new();
        a_button_bind(context.right, A_KEY_RIGHT);
        a_button_bind(context.right, A_BUTTON_RIGHT);
    }}

    A_STATE_TICK
    {{
        if(a_button_pressGet(context.up)) {{
            context.y--;
        }}

        if(a_button_pressGet(context.down)) {{
            context.y++;
        }}

        if(a_button_pressGet(context.left)) {{
            context.x--;
        }}

        if(a_button_pressGet(context.right)) {{
            context.x++;
        }}
    }}

    A_STATE_DRAW
    {{
        a_color_baseSetHex(0xaaff88);
        a_draw_fill();

        a_color_baseSetHex(0xffaa44);
        a_draw_rectangle(context.x - 40, context.y - 40, 80, 80);
    }}

    A_STATE_FREE
    {{
        a_button_free(context.up);
        a_button_free(context.down);
        a_button_free(context.left);
        a_button_free(context.right);
    }}
}}
""".format())

    dir_root.write_file('.gitignore',
"""\
/bin/
/obj/
""")

    tool.shell('cd {} && ' \
               'git init && ' \
               'git add .gitignore make/Makefile src/main.c'
        .format(dir_root.path))

    tool.output.note('To build and run:')
    tool.output.note('cd {} && make -j run'.format(dir_mke.path))
