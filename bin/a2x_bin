#!/usr/bin/env python3

"""
    Copyright 2016-2018 Alex Margarit
    This file is part of a2x, a C video game framework.

    a2x-framework is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    a2x-framework is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with a2x-framework.  If not, see <http://www.gnu.org/licenses/>.
"""

import os

from utils.output import Output
from utils.tool import Tool

class BinTool(Tool):
    def main(self):
        bin_file = self.get_arg('File.bin')
        h_file = self.get_arg('File.h')
        original_path = self.get_arg('OriginalPath')
        cvar_prefix = self.get_arg('CVarPrefix')

        if os.path.isdir(bin_file):
            entries = self.listdir(bin_file)
            bin_data = ''
            bin_size = len(entries)

            for f in entries:
                bin_data += '\n        "{}",'.format(f)

            fmt_content = """\
static const struct {{
    const char* path;
    size_t size;
    const char* entries[{size}];
}} {prefix}{var} = {{
    "{path}",
    {size},
    {{{data}
    }}
}};
"""
        else:
            bin_bytes = self.readbytes(bin_file)
            bin_data = ''
            bin_size = len(bin_bytes)

            for index, byte in enumerate(bin_bytes):
                if index % 8 == 0:
                    bin_data += '\n        '

                bin_data += '0x{:0>2x},'.format(byte)

            fmt_content = """\
static const struct {{
    const char* path;
    size_t size;
    uint8_t buffer[{size}];
}} {prefix}{var} = {{
    "{path}",
    {size},
    {{{data}
    }}
}};
"""

        self.writefile(h_file, fmt_content.format(
            prefix = cvar_prefix,
            var = self.sanitizeFileNameForCVar(original_path),
            path = original_path,
            size = bin_size,
            data = bin_data))

if __name__ == '__main__':
    BinTool('File.bin File.h OriginalPath CVarPrefix').run()
